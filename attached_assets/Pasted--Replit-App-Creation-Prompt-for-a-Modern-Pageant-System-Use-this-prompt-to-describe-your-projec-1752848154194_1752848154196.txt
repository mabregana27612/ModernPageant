## Replit App Creation Prompt for a Modern Pageant System

Use this prompt to describe your project when starting a new app on Replit. Share this with collaborators or as a core project brief.

**Title:**  
Full-Featured Secure Pageant System with Modern Analytics

**Description:**  
Develop a responsive, secure web application for managing beauty pageants or talent competitions. The system will include participant registration, dynamic voting, result computation, real-time analytics, and an admin panel. The platform should support advanced data visualization (charts/graphs), Google-powered email notifications, and strong user authentication.

### 🛡️ Core Requirements

- **Frontend:** React (with Material UI or Ant Design for polished, responsive layout)
- **Backend:** Node.js with Express (secure REST API)
- **Database:** PostgreSQL or MongoDB
- **Authentication:** OAuth 2.0 (Google sign-in for users and admins)
- **Email Integration:** Nodemailer + Google OAuth2 (emails for registration, voting confirmations)
- **App Structure:** Clean separation between frontend, backend, and database logic
- **Secrets Management:** Use Replit Secrets tab (never hardcode credentials)
- **HTTPS enforced, OWASP security best practices**

### 💡 State-of-the-Art UI Features

#### Main Screens & Features

| Feature                  | Description                                                                           |
|--------------------------|----------------------------------------------------------------------------------------|
| **Landing Page**         | Eye-catching hero section; clear CTAs for registering, judging, and viewing results    |
| **Registration**         | Step-by-step forms, validation, profile photo upload, email confirmation               |
| **Dashboard**            | Personalized for participant, judge, and admin roles                                  |
| **Voting Page**          | Real-time leaderboard with photos, bios, and live vote count (refreshes via websockets/REST)     |
| **Results & Analytics**  | Interactive charts (bar, pie, line) of votes, voter demographics, judge scoring trends |
| **Admin Panel**          | Master controls for event creation, reporting, manual overrides, and anti-fraud checks |
| **Notifications**        | Email status updates (automated and manual triggers) via Google email integration      |
| **Responsive Design**    | Fully functional across desktop, tablet, and mobile                                   |

### 📊 Analytics & Reporting

- **Contest Performance**: Real-time line/bar charts of vote counts per contestant (use [Recharts](https://recharts.org/) or [Chart.js](https://www.chartjs.org/) for React).
- **Judge Analytics**: Compare judge scores, identify voting anomalies.
- **Demographics**: Pie charts for gender, age distribution (if collected).
- **Export**: Downloadable Excel/CSV reports for post-event analysis.

### Example UI/UX Flow

1. **Home:** Brand/banner, upcoming events, smooth navigation
2. **Register:** Easy sign-up; email verification with OTP (via Google)
3. **Vote:** View contestants with large photos, bios, & live ranking
4. **Admin:** Create/view events, invite judges, manage participants, view analytics
5. **Results:** Animated charts for results; “Winner Announcement” screen

### 💻 Prompt for Replit Project

> **Build a secure and responsive pageant system using React (frontend), Node.js/Express (backend), and PostgreSQL or MongoDB (database). Implement Google OAuth for all authentication and integrate with Google email services for critical notifications using OAuth2 (never store passwords in code). Use Material UI or Ant Design for state-of-the-art, mobile-first design—ensure a professional, elegant look.  
>  
> Include:  
> - Registration, voting, results, admin panels  
> - Real-time analytics and data visualizations (charts for votes, demographics, trends)  
> - Robust access control (participant/judge/admin roles)  
> - Automated email notifications for event updates and actions  
> - Secure handling of all user data (compliance with best practices)  
>  
> Use environment variables for all secrets. Provide full error handling and security against common web threats. Deliver a modern, delightful user experience with strong reporting tools.*

Adapt this prompt as needed for your Replit project and team. For best results, prepare sample contestant data and chart visualizations early in your build process.